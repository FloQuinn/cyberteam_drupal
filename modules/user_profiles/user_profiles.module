<?php

use Drupal\user\UserInterface;
use Drupal\Component\Serialization\Json;

/**
 * Hide the username field on the profile form -- we don't want users to 
 * be able to set or change their username.
 */
function user_profiles_form_alter(&$form, &$form_state, $form_id) {
  // Hide username field
  if ($form_id == 'user_form') {
    $form['account']['name']['#access'] = FALSE;
  }  
}

/**
 * CILogon Auth pre authorize hook.
 *
 * This hook runs before a user is authorized and before any claim mappings
 * take place.
 *
 * For AMP, we lookup the user using $context['userinfo']['eppn']
 */
function user_profiles_cilogon_auth_pre_authorize($account, array $context) {

  $eppn = $context['userinfo']['eppn'];
  $user = user_load_by_name($eppn);

  if ($user === FALSE) {
    \Drupal::messenger()->addError(basename(__FILE__) . ':' . __LINE__ 
    . " -- unable to load user [$eppn]");
    return FALSE;
  }

  return $user;
}


/**
 * Save userinfo hook.
 *
 * This hook runs after the claim mappings have been applied by the OpenID
 * Connect module, but before the account will be saved.
 *
 * A popular use case for this hook is mapping additional information like
 * user roles or other complex claims provided by the identity provider, that
 * the CILogon Auth module has no mapping mechanisms for.
 *
 * @param \Drupal\user\UserInterface $account
 *   A user account object.
 * @param array $context
 *   An associative array with context information:
 *   - tokens:         Array of original tokens.
 *   - user_data:      Array of user and session data from the ID token.
 *   - userinfo:       Array of user information from the userinfo endpoint.
 *   - plugin_id:      The plugin identifier.
 *   - sub:            The remote user identifier.
 *   - is_new:         Whether the account was created during authorization.
 *
 * @ingroup cilogon_auth_api
 */
function user_profiles_cilogon_auth_userinfo_save(UserInterface $account, array $context) {

  // // while testing, examine values before we set them
  // $msg = ('before set, field_user_first_name = [' . $account->get('field_user_first_name')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $msg =('before set, field_user_last_name = [' . $account->get('field_user_last_name')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $msg =('before set, email = [' . $account->getEmail() . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $msg = ('before set, field_institution = [' . $account->get('field_institution')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $$msg = ('before set, field_citizenships = [' . $account->get('field_citizenships')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);

  $userinfo = $context['userinfo'];

  $username = $userinfo['eppn'];

  // GET https://xras-identity-service-demo.xsede.org/profiles/v1/people/apasquale` resulted in a 404 Not Found
  // GET https://xras-identity-service-demo.xsede.org/profiles/v1/people/apasquale@access-ci.org` resulted in a 404 Not Found
  
  $api_account_array = get_account_data_from_api($username);

  if ($api_account_array !== FALSE) {
    if (in_array('organizationName', $api_account_array))
      $account->set('field_institution', $api_account_array['organizationName']);
    if (in_array('citizenships', $api_account_array))
      $account->set('field_citizenships', implode(',', $api_account_array['citizenships']));  // convert to comma separated string
  }
  

  $account->set('field_user_first_name', $userinfo['given_name']);
  $account->set('field_user_last_name', $userinfo['family_name']);
  $account->setUsername($username);
  $account->setEmail($userinfo['email']);

      
  // // while testing, examine values after setting them
  // $msg = ('after set, field_user_first_name = [' . $account->get('field_user_first_name')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $msg =('after set, field_user_last_name = [' . $account->get('field_user_last_name')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $msg =('after set, email = [' . $account->getEmail() . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $msg = ('after set, field_institution = [' . $account->get('field_institution')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
  // $$msg = ('after set, field_citizenships = [' . $account->get('field_citizenships')->value . ']');
  // \Drupal::messenger()->addStatus(basename(__FILE__) . ':' . __LINE__ . ' -- ' . $msg);
}

/**
 * Pull account info from the api.  
 * 
 * @return mixed of account info (or FALSE if unable to get data)
 */
function get_account_data_from_api($username) {

  // // previous URL
  // $base_url = 'https://xras-identity-service-demo.xsede.org/profiles/v1/people';

  // ACCESS production URL for the profile API
  $base_url = 'https://allocations-api.access-ci.org/identity/profiles/v1';
  $request_url = $base_url . '/' . $username;

  // look for the ramps key in file system (e.g. root /var/www/cyberteam_drupal_dev/web)
  $path = 'sites/default/files/private/.keys/secrets.json';
  if (!file_exists($path)) {
    \Drupal::messenger()->addError("[User Profiles] Unable to get ramps api key");
    return false;
  }
  $secrets_json_text = file_get_contents($path);
  $secrets_data = json_decode($secrets_json_text, TRUE);
  $api_key = $secrets_data['ramps_api_key'];

  $request_options = array('headers' => array(
      'XA-API-KEY' => $api_key,
      'XA-REQUESTER' => 'MATCH',
      'Content-Type' => 'application/json'));
  
  /** @var \GuzzleHttp\Client $client */
  $client = new GuzzleHttp\Client();
  try {
    $response = $client->request('GET', $request_url, $request_options);
    $userinfo = Json::decode((string) $response->getBody());
    return $userinfo;
  } catch (Exception $e) {
    \Drupal::messenger()->addError("Could not retrieve user profile information: " .  $e->getMessage());
  }
  return false;
}


