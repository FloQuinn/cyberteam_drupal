<?php

use \Drupal\Component\Utility\Xss;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Link;
use \Drupal\Core\Url;
use \Drupal\node\Entity\Node;
use \Drupal\user\Entity\User;

/**
 * Implements hook_form_alter().
 *  when a user does add news or edit an existing news, called before showing the form.
 */
function access_news_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  showStatus("in NEWS form alter: ".$form_id);
    if ($form_id == 'node_access_news_edit_form' || $form_id == 'node_access_news_form') {
    
    // Only allow these roles to publish ACCESS News
    // Default is for ACCESS News to be unpblished.
    $allowed_roles = ['administrator'];
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    if (!array_intersect($allowed_roles, $roles)) {
      // Set status field to readonly if not authorized to publish
      // TODO: not currently working.
      // Field isn't displayed for non-admins. Not readonly for admins.
      $form['status']['#attributes'] = ['readonly' => 'readonly'];
    }
    $form['status']['#group'] = 'content';  // status is published/unpublished
    $form['field_broadcast_affinity_groups']['#group'] = 'options';

    $form['#validate'][] = 'access_news_validate';
  }
}

/**
 * Custom validation callback.
 */
function access_news_validate(&$form, FormStateInterface $form_state) {

  showStatus("News: in validate");
  // administrator can assign ACCESS News to any Affinity Group
  if (in_array('administrator', \Drupal::currentUser()->getRoles())) {
    return;
  }
  showStatus("... validating (not admin)...");
  // Require that the person saving is an Affinity Group Coordinator
  // if an Affinity Group is selected for ACCESS News.
  $user = User::load(\Drupal::currentUser()->id());
  $ag_node_array = $form_state->getValue('field_affinity_group_node');
  // Valid values are arrays with non-null 'target-id' value
  //kint($ag_node_array);
  //die();
  foreach ($ag_node_array as $ag_node) {
    if (is_array($ag_node)) {
      showStatus('...yes array agnode');

      $nid = $ag_node['target_id'];
      if ($nid) {
        showStatus('...nid in validate:'.$nid);
        $authorized = FALSE;
        $n = \Drupal\node\Entity\Node::load($nid);
        // Load coordinator(s) for the Affinity Group
        $coordinator_field = $n->get('field_coordinator');
        if ($coordinator_field) {
          $coordinators = $coordinator_field->getValue();
          foreach ($coordinators as $coordinator) {
            if ($coordinator['target_id'] == $user->get('uid')->value) {
              $authorized = TRUE;
            }
          }
        }
        // Check that the Affinity Group term exists
        $name = $n->get('title')->value;
        $vid = 'affinity-group';
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name]);
        if (!$term) {
          $form_state->setErrorByName('access_news', t('The Affinity Group taxonomy term ' . $name . ' does not exist. Please contact an administrator.'));
        }
      }
      if (!$authorized) {
        $form_state->setErrorByName('access_news', t('You are not a Coordinator for the ' . $n->get('title')->value . ' Affinity Group.'));
      }
    }
    showStatus('...!! not is_array for ag_node');
  }
}

/**
 * Implements hook_node_presave().
 */
function access_news_node_presave(Node $node) {
  $type = $node->bundle();
  if ( $type == 'access_news' ) {
    //kint("node enterign presave code");
    showStatus('acess news presave...');
    //kint($node);

    $getFields = $node->getFields();    
    $broadcastArray = $getFields['field_broadcast_affinity_groups']->getValue();
    $broadcastToAGs = $broadcastArray[0]['value'];
    showStatus ("broadcast: ".$broadcastToAGs);

    // Set Affinity Group taxonomy terms based on the Affinity Group node field
    $ag_node_array = $node->get('field_affinity_group_node');
    $node->set('field_affinity_group', NULL);
    foreach ($ag_node_array as $ag_node) {
      // Get the Affinity Group node
      $nid = $ag_node->getValue()['target_id'];
      $ag = \Drupal\node\Entity\Node::load($nid);
      $name = $ag->get('title')->value;
      // Get the term with the same name as the Affinity Group
      $vid = 'affinity-group';
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name]);
      $node->get('field_affinity_group')->appendItem(array_key_first($term));
    }    
  }
  //kint("node after presave code");
  //kint($node);
  //die();
}

/**
 * Implements hook_node_insert().
 */
function access_news_node_insert(Node $node) {
  $type = $node->bundle();
  showstatus("node insert...");
  if ($type == 'access_news') {
    showstatus("... in access news node insert");
    // Send admins a message if an ACCESS News node is created  
    // and needs approval for publication.

    if (!$node->isPublished()) {
      $nid = $node->id();
      $title = Xss::filter($node->gettitle());
      access_news_admin_email($nid, $title);
      $message = t('Thank you for submitting your news. News items require approval by an admin to be published.');
      \Drupal::messenger()->addMessage($message);
    }
    else {
      // if published, see if they want the news to be broadcast to listed AGs
      //showStatus("going to AGBroadcast from INSERT");
      affinityGroupBroadcast($node);
    }
  }
}

function access_news_entity_update(Drupal\Core\Entity\EntityInterface $node) {
  $type = $node->bundle();
  //showstatus("entity update...");
  
  if ($type == 'access_news') {
  
  //showstatus("news_entity update...");

    // if published, check for broadcast to listed AGs
    if ($node->isPublished()) {
      //showStatus("going to AGBroadcast from UPDATE");
      affinityGroupBroadcast($node);
    }

    //kint($entity);
    //die();
  }

}

// Send email to constant contact email list of chosen Affinity Groups
//  if both:
// 1) option to BroadcastToAffinityGroup is checked 
// 2) affinity groups specified
//
// After send attemp, uncheck the broadcast option.
function affinityGroupBroadcast(Node $node) {

  $getFields = $node->getFields();    
  $broadcastArray = $getFields['field_broadcast_affinity_groups']->getValue();
  $broadcastToAGs = $broadcastArray[0]['value'];
  //showStatus ("broadcast: ".$broadcastToAGs);
  //kint($node);
  // find the node ids for the AGs.  If AGs have been specified, get the 
  // corresponding Constant Contact email list ids from the nodes.

  if ($broadcastToAGs) {
    
    $agNodes = $node->get('field_affinity_group_node');
    //kint($agNodes);
    
    if (count($agNodes)) {
      //showStatus('ag node count'.count($agNodes));
      $ccListIdArray = array();
      $agNames = array();

      foreach ($agNodes as $agNode) {     
        //kint($agNode);
        $nid = $agNode->getValue()['target_id'];
        $ag = \Drupal\node\Entity\Node::load($nid);
        //kint($ag);
        $name = $ag->get('title')->value;
        //kint($name);
        //showStatus($name);
        array_push($agNames, $name);
        $ccListId = $ag->get('field_list_id')->value;
        //showStatus($ccListId);
        
        array_push($ccListIdArray, $ccListId);      
      }

      //kint($ccListIdArray);

      if (!count($ccListIdArray)) {
        //showStatus("Missing Constant Contact List Ids for Affinity Group");
      } else {
        //kint($node);
  
        //showStatus("EMAILING TO AGS...");
        $bodyArray = $getFields['body']->getValue();
        $body = $bodyArray[0]['value'];
        $titleArray = $getFields['title']->getValue();
        $title = $titleArray[0]['value'];
    //showStatus ("broadcast: ".$broadcastToAGs);
    //kint($body);
    //kint($title);
        emailToAffinityGroups($body, $title, $ccListIdArray, $agNames);        
      }
    }
    
  }
}


function access_news_node_update(Node $node) {
  
  $type = $node->bundle();
  
  if ($type == 'access_news') {
  
    //showstatus("node update...");
    //kint('node:');
    //kint($node);
  }
  
}

/**
 * Build access_news admin Email.
 */
function access_news_admin_email($nid, $title) {
  $options = ['absolute' => TRUE];
  $here = Url::fromRoute('entity.node.canonical', ['node' => $nid], $options);
  $body['string'] = [
    '#type' => 'inline_template',
    '#template' => '<p>{{ intro }}<p>
    <p>{{ link }}</p>',
    '#context' => [
      'intro' => t('An ACCESS News post has been created:'),
      'link' => Link::fromTextAndUrl($title, $here)->toString(),
    ],
  ];
  // Get all user emails with the match_pm role.
  $ids = \Drupal::entityQuery('user')
    ->condition('status', 1)
    ->condition('roles', 'match_pm')
    ->execute();
  $users = User::loadMultiple($ids);
  $email = '';
  $user_count = count($users);
  $iterate = 0;
  foreach($users as $user){
    $iterate++;
    $email .= $user->get('mail')->getString();
    if ($user_count != $iterate) {
      $email .= ",";
    }
  }
  $current_user = User::load(\Drupal::currentUser()->id());
  $env = getenv('PANTHEON_ENVIRONMENT');
  if ($env == 'live') {
    $to_email = $email;
  }
  else {
    $to_email = $current_user->getEmail();
  }
  $render_service = \Drupal::service('renderer');
  $params = [];
  $params['to'] = $to_email;
  $params['body'] = $render_service->render($body);
  $params['title'] = "ACCESS News: $title";
  access_news_send('access-news-admin-update', $params);
}

/**
 * Send email.
 */
function access_news_send($key, $params) {
  $to = $params['to'];
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;
  $module = 'access_news';
  $mailManager = \Drupal::service('plugin.manager.mail');
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  return $result;
}

/**
 * Implements hook_mail().
 */
function access_news_mail($key, &$message, $params) {
  switch ($key) {
  case 'access-news-admin-update':
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = $params['title'];
    $message['body'][] = $params['body'];
    break;
  }
}

/**
 * Implements hook_theme().
 */
function access_news_theme($existing, $type, $theme, $path): array {
  return [
    'requestnews_block' => [
      'variables' => [
      ]
    ],
  ];
}