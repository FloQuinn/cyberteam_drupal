<?php

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\node\Entity\Node;
use \Drupal\user\Entity\User;

/**
 * Implements hook_form_alter().
 * 
 * Provide custom validation for ACCESS New and Recurring Events
 */
function access_news_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_access_news_edit_form' || $form_id == 'node_access_news_form' || $form_id == 'eventseries_default_add_form' || $form_id == 'eventseries_default_edit_form') {
    $form['#validate'][] = 'access_news_validate';
  }
}

/**
 * Custom validation callback.
 * 
 * Require that the person adding an Affinity Group
 * is a Coordinator of that Affinity Group.
 * 
 * Also, check that the Affinity Group taxonomy term exists.
 */
function access_news_validate(&$form, FormStateInterface $form_state) {
  // Require that the person saving is an Affinity Group Coordinator
  // if an Affinity Group is selected for ACCESS News.
  $user = User::load(\Drupal::currentUser()->id());
  $ag_node_array = $form_state->getValue('field_affinity_group_node');
  // Valid values are arrays with non-null 'target-id' value
  foreach ($ag_node_array as $ag_node) {
    if (is_array($ag_node)) {
      $nid = $ag_node['target_id'];
      if ($nid) {
        $authorized = FALSE;
        $n = \Drupal\node\Entity\Node::load($nid);
        // administrator can assign ACCESS News to any Affinity Group
        if (in_array('administrator', \Drupal::currentUser()->getRoles())) {
          $authorized = TRUE;
        } else {
          // Load coordinator(s) for the Affinity Group
          $coordinator_field = $n->get('field_coordinator');
          if ($coordinator_field) {
            $coordinators = $coordinator_field->getValue();
            foreach ($coordinators as $coordinator) {
              if ($coordinator['target_id'] == $user->get('uid')->value) {
                $authorized = TRUE;
              }
            }
          }
        } 
        // Check that the Affinity Group term exists
        $name = $n->get('title')->value;
        $vid = 'affinity-group';
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name]);
        if (!$term) {
          $form_state->setErrorByName('access_news', t('The Affinity Group taxonomy term ' . $name . ' does not exist. Please contact an administrator.'));
        }
        if (!$authorized) {
          $form_state->setErrorByName('access_news', t('You are not a Coordinator for the ' . $n->get('title')->value . ' Affinity Group.'));
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 * 
 * Set the Affinity Group taxonomy term based on the 
 * Affinity Group node so people only have to select it once.
 */
function access_news_node_presave(Node $node) {
  $type = $node->bundle();
  if ( $type == 'access_news' ) {
    update_affinity_group($node);
  }
}

/**
 * Implements hook_entity_presave().
 * 
 * Set the Affinity Group taxonomy term based on the 
 * Affinity Group node so people only have to select it once.
 */
function access_news_entity_presave(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ( $type == 'eventseries' ) {
    update_affinity_group($entity);
  }
}

/**
 * Set Affinity Group taxonomy terms based on the Affinity Group node field
 */
function update_affinity_group($node) {
  $ag_node_array = $node->get('field_affinity_group_node');
  $node->set('field_affinity_group', NULL);
  foreach ($ag_node_array as $ag_node) {
    // Get the Affinity Group node
    $nid = $ag_node->getValue()['target_id'];
    $ag = \Drupal\node\Entity\Node::load($nid);
    $name = $ag->get('title')->value;
    // Get the term with the same name as the Affinity Group
    $vid = 'affinity-group';
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name]);
    $node->get('field_affinity_group')->appendItem(array_key_first($term));
  }
}

/**
 * Implements hook_node_insert().
 * 
 * Provide message that approval is required
 */
function access_news_node_insert(Node $node) {
  $type = $node->bundle();
  if ($type == 'access_news') {
    if (!$node->isPublished()) {
      $allowed_roles = ['administrator', 'affinity_group_leader'];
      if (!in_array($allowed_roles, \Drupal::currentUser()->getRoles())) {
        $message = t('Thank you for submitting your news. Please change the state to "Ready for Review" when you would like to publish it.');
        \Drupal::messenger()->addMessage($message);
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 * 
 *  * Provide message that approval is required
 */
function access_news_entity_insert(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ( $type == 'eventseries' ) {
    if (!$entity->isPublished()) {
      $allowed_roles = ['affinity_group_leader'];
      if (!in_array($allowed_roles, \Drupal::currentUser()->getRoles())) {
        $message = t('Thank you for submitting your event. Please change the state to "Ready for Review" when you would like to publish it.');
        \Drupal::messenger()->addMessage($message);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function access_news_theme($existing, $type, $theme, $path): array {
  return [
    'requestnews_block' => [
      'variables' => [
      ]
    ],
  ];
}