<?php

use Drupal\access_affinitygroup\Plugin\ConstantContactApi;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Component\Utility\Xss;

/**
 * @file
 * Module for affinity group.
 */

/**
 * Implements hook_node_insert().
 */
function access_affinitygroup_node_insert(EntityInterface $entity) {
  $type = $entity->bundle();
  if ($type == 'affinity_group') {
    $get_fields = $entity->getFields();
    $title = $entity->getTitle();
    $summary = $get_fields['body']->summary;
    $post_data = [
      'name' => $title,
      'favorite' => 0,
      'description' => $summary
    ];
    $post_data = json_encode($post_data);
    // Create constant contact list for affinity group
    $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
    $list_id = Xss::filter($created_list->list_id);
    $entity->set('field_list_id', $list_id);
  }
}

/**
 * Implements hook_entity_presave().
 */
function access_affinitygroup_entity_presave(EntityInterface $entity) {
  $type = $entity->bundle();
  if ( $type == 'affinity_group' ) {
    if ( method_exists($entity, 'getFlaggableType') ) {
      $current_user = \Drupal::currentUser();
      $user_id = $current_user->id();
      $user_detail = User::load($user_id);
      $user_cc_id = $user_detail->get('field_constant_contact_id')->getValue()[0]['value'];
      //$list_id = $entity->get('field_list_id');
      $cca = new ConstantContactApi;
      $cc_user = $cca->apiCall("/contacts/$user_cc_id");
      kint($entity);
      die();

    } else {
      $get_fields = $entity->getFields();
      $title = $entity->getTitle();
      $summary = $get_fields['body']->summary;
      // Api max is 255 characters.
      $summary = (strlen($summary) > 255) ? substr($summary,0,255) : $summary;
      $post_data = [
        'name' => $title,
        'favorite' => 0,
        'description' => $summary
      ];
      $post_data = json_encode($post_data);

      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists ');
      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          // Constant Contact contains affinity group
          // title in list.
          $list_exists = true;
          break;
        }
      }
      if (! $list_exists) {
        // Create Constant contact title with affinity
        // group title.
        $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
        $list_id = Xss::filter($created_list->list_id);
        $entity->set('field_list_id', $list_id);
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function access_affinitygroup_entity_delete(\Drupal\Core\Entity\EntityInterface $entity) {
  $type = $entity->bundle();
  if ($type == 'affinity_group' && !method_exists($entity, 'getFlaggableType') ) {
    $title = $entity->getTitle();
    $cca = new ConstantContactApi;
    $lists = $cca->apiCall('/contact_lists');
    $list_exists = false;
    foreach ($lists->lists as $list) {
      if ($list->name == $title) {
        // Constant Contact contains affinity group
        // title in list.
        $list_id = $list->list_id;
        break;
      }
    }

    if (isset($list_id)) {
      $post_data = [
        'list_id' => $list_id
      ];
      $post_data = json_encode($post_data);
      $cca->apiCall("/contact_lists/$list_id", $list_id, 'DELETE');
    }
  }
}

/**
 * Implements hook_user_login().
 */
function  access_affinitygroup_user_login(UserInterface $account) {
  $current_user = \Drupal::currentUser();
  $user_id = $current_user->id();
  $user_detail = User::load($user_id);
  $user_first_name = $user_detail->get('field_user_first_name')->getString();
  $user_last_name = $user_detail->get('field_user_last_name')->getString();
  $user_mail = $current_user->getEmail();

  $cca = new ConstantContactApi;
  $cca_user_id = $cca->addContact($user_first_name, $user_last_name, $user_mail, $user_id);

  $user_detail->set('field_constant_contact_id', $cca_user_id);
  $user_detail->save();
}

/**
 * Implements hook_cron().
 */
function access_affinitygroup_cron() {
  // Setting this to run once a day, may need adjustment
  // if cron is run more frequently.
  if ((date('G', time()) == 01) && (date('i', time()) >= 0) && (date('i', time()) <= 30)) {
    $cca = new ConstantContactApi;
    $cca->newToken();
  }
}
