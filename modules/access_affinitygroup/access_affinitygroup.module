<?php

use Drupal\access_affinitygroup\Plugin\ConstantContactApi;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Component\Utility\Xss;

/**
 * @file
 * Module for affinity group.
 * 
 * Each affinity group (AG) has an associated Constant Contact list.
 * The list in Constant Contact is stored by the AG name, so relationship
 * to CC list is broken if AG name changes.
 */

/**
 * Implements hook_node_insert().
 */
function access_affinitygroup_node_insert(EntityInterface $entity)
{
  $type = $entity->bundle();
  if ($type == 'affinity_group') {
    $get_fields = $entity->getFields();
    $title = $entity->getTitle();
    $summary = $get_fields['body']->summary;
    $post_data = [
      'name' => $title,
      'favorite' => 0,
      'description' => $summary
    ];
    $post_data = json_encode($post_data);
    // Create constant contact list for affinity group
    $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
    $list_id = Xss::filter($created_list->list_id);
    $entity->set('field_list_id', $list_id);
  }
}

/**
 * Implements hook_entity_presave(). 
 */
function access_affinitygroup_entity_presave(EntityInterface $entity)
{ 
  logdru("IN PRESAVE");
  
  $type = $entity->bundle();
  if ($type == 'affinity_group') {
    //kint("In AG");
    logdru("IN TYPE=AG");

    if (method_exists($entity, 'getFlaggableType')) {

      /* user did join the group */
      logdru("IN FLAGGABLE");
    
      //kint("In flaggable");
      //kint($entity);
      
      $current_user = \Drupal::currentUser();
      $user_id = $current_user->id();
            
      $user_detail = User::load($user_id);
      $user_cc_id = $user_detail->get('field_constant_contact_id')->getValue()[0]['value'];
      
      // todo: what if user has no cc id yet. need to add it here?      
      //    kint($user_detail);
      
      // This entity is the flag (user join/unjoin) that corresponds to affinity group 
      // We find the appropriate affinity group node, which contains a field with this entity id
      
      $group_id = $entity->get('entity_id')->getValue()[0]['value'];
      //kint($group_id);

//      joinOrLeaveList($group_id, $user_cc_id);  //put user stuff from top in here too

      $query = \Drupal::entityQuery('node');
      $node_ids = $query
        ->condition('field_affinity_group', $group_id)
        ->execute();
        
      //kint($node_ids);
      $aval =  array_values($node_ids);
      $nid = $aval[0];
     
      // todo: hangle err if list has no field_list_id. 
      $ag = \Drupal\node\Entity\Node::load($nid);      
      $list_cc_id = $ag->get('field_list_id')->getValue()[0]['value'];;
          
      logdru('list id: '.$list_cc_id);
      logdru('user id: '.$user_cc_id);

      if (empty($list_cc_id)) {
        logdru('Missing Constant Contact List Id for this Affinity Group.');
        return;
      }
      //x CC stores association user:contact list in each user. 
      //x We get the user's contact list and add in the new list id
      
      $cca = new ConstantContactApi;
      //$cc_user = $cca->apiCall("/contacts/$user_cc_id");
      //kint($cc_user);
      //die();

      $list_array = [$list_cc_id];
/*
      $cc_contact = [
        'email_address' => [
          'address' => $mail,
          'permission_to_send' => 'implicit'
        ],
        'first_name' => $firstname,
        'last_name' => $lastname,
        'create_source' => 'Account',
      ];
      */

      $post_data = [
        'source' => [
          'contact_ids' => [$user_cc_id]
        ],
        'list_ids' =>  [$list_cc_id]
      ];
      $post_data = json_encode($post_data);
      logdru($post_data);
      //$cc_response = $cca->apiCall("/contacts/$cc_list_id", 'PUT');      
      $cc_response = $cca->apiCall('/activities/add_list_memberships', $post_data, 'POST');
      logdru($cc_response);

    } else {
      logdru("In NOT AG!!!!!!!!!!!!!!!!!!!!!");
      
      // affinity group edit was saved by admin user
      $get_fields = $entity->getFields();
      $title = $entity->getTitle();
      $summary = $get_fields['body']->summary;
      // Api max is 255 characters.
      $summary = (strlen($summary) > 255) ? substr($summary, 0, 255) : $summary;
      $post_data = [
        'name' => $title,
        'favorite' => 0,
        'description' => $summary
      ];
      $post_data = json_encode($post_data);

      //kint($post_data);
      
      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists ');
      // here you can see all lists CC knows about along with their List IDs
      //kint($lists);
      
      // TO DO: if we get error bc cc is not authorized, bail instead of trying to add to list again
      // and resetting list id

      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          // Constant Contact contains affinity group
          // title in list.
          $list_exists = true;
          break;
        }
      }

      if (!$list_exists) {
        logdru('CC List Item not found on list of lists from CC. Calling CC list create API');

        // Create Constant contact title with affinity
        // group title.
        $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
        //kint($created_list);
        
        $list_id = Xss::filter($created_list->list_id);
        if (!empty($list_id)) {
          logdru('Setting cc list id field in create list.');
          $entity->set('field_list_id', $list_id);
        } else {
          logdru('Bad list id returned from CC api attempting to create list.');
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function access_affinitygroup_entity_delete(\Drupal\Core\Entity\EntityInterface $entity)
{
  kint ($entity);
  kint('in delete');
  
  $type = $entity->bundle();

  kint($type);
  $x = method_exists($entity, 'getFlaggableType');
  kint('flag method exists : '. $x);
  die();

  if ($type == 'affinity_group') {

    if (method_exists($entity, 'getFlaggableType')) {     

      // user did 'leave' on affinity group
      
      // call the modifyUserMembership(), same as add but remove api call.


    } else {

      $title = $entity->getTitle();
      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists');
      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          // Constant Contact contains affinity group
          // title in list.
          $list_id = $list->list_id;
          break;
        }
      }

      if (isset($list_id)) {
        $post_data = [
          'list_id' => $list_id
        ];
        $post_data = json_encode($post_data);
        $cca->apiCall("/contact_lists/$list_id", $list_id, 'DELETE');
      }
    }
  }
}



/**
 * Implements hook_user_login().
 */
// ? should we check if they've logged on before? Could do this when they joing
// aff group if no ccid?.  What if a certain user get cca err every time (why would they), logging on will take a longer time?
function  access_affinitygroup_user_login(UserInterface $account)
{
  $current_user = \Drupal::currentUser();

  //kint($current_user);
  $user_id = $current_user->id();
  $user_detail = User::load($user_id);

  $cca_user_id = null;
  $field_val = $user_detail->get('field_constant_contact_id')->getValue();
  if (!empty($field_val)) {
    $cca_user_id = $field_val[0]['value'];    
  }

  if (empty($cca_user_id)) {

    $user_first_name = $user_detail->get('field_user_first_name')->getString();
    $user_last_name = $user_detail->get('field_user_last_name')->getString();
    $user_mail = $current_user->getEmail();

    logdru("Trying Add Contact (api)");
    $cca = new ConstantContactApi;
    $cca_user_id = $cca->addContact($user_first_name, $user_last_name, $user_mail, $user_id);
    //kint($cca_user_id);

    if (!empty($cca_user_id)) {
      logdru("SUCCESS new contact id. SETTING cca user id field");
      $user_detail->set('field_constant_contact_id', $cca_user_id);
      $user_detail->save();
    }
  } else {
    // just for debugging in early stages
    logdru("Login and NOT attempting add of new constant contact id.");
  }

}

function logdru($logmsg)
{
  $msg = basename(__FILE__) . ':' .  print_r($logmsg, true);
  \Drupal::messenger()->addStatus($msg);
}    
/**
 * Implements hook_cron().
 */
function access_affinitygroup_cron()
{
  // Setting this to run once a day, may need adjustment
  // if cron is run more frequently.
  if ((date('G', time()) == 15) && (date('i', time()) >= 0) && (date('i', time()) <= 60)) {
    $cca = new ConstantContactApi;
    $cca->newToken();
  }
}
