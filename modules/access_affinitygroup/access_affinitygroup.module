<?php

use Drupal\access_affinitygroup\Plugin\ConstantContactApi;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Component\Utility\Xss;

/**
 * @file
 * Module for affinity group.
 * 
 * Each affinity group (AG) has a dedicated "List" in Constant Contact, and
 * each user is a Constant Contact (CC) "Contact". 
 * We add a user to CC when the user logs in, if they don't already have a
 * constant contact id stored on the user form.  
 * When a user Joins or Leaves an AG, we add or remove the user from
 * the corresponding CC list.
 * When an AG is edited or created, we add the list to CC if not already done.
 * Each AG should have a 'list_id' item that was generated by CC.
 * Note: The list in Constant Contact is stored by the AG name, so relationship
 * to CC list is broken if AG name changes.
 */

/**
 * Implements hook_node_insert().
 * When AG is created, call CC api to create new email list.
 */
function access_affinitygroup_node_insert(EntityInterface $entity)
{
  $type = $entity->bundle();
  if ($type == 'affinity_group') {
    $get_fields = $entity->getFields();
    $title = $entity->getTitle();
    $summary = $get_fields['body']->summary;
    $post_data = [
      'name' => $title,
      'favorite' => 0,
      'description' => $summary
    ];
    $post_data = json_encode($post_data);
    // Create constant contact list for affinity group
    $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
    $list_id = Xss::filter($created_list->list_id);
    $entity->set('field_list_id', $list_id);
  }
}

/**
 * Implements hook_entity_presave(). 
 * Handles either
 * 1) User did Join on Affinity Group.  
 *    We call api to add user to corresponding email list.
 * 2) Admin user saved Affinity Group form  
 *    If the AG does not already have a list_id from CC,
 *    we call api to create the email list.
 * 
 * Join and Leave AG are implemented using a drupal Flag. Each AG
 * has a corresponding flag that can be set per-user, signifying 
 * whether the user belongs to the AG.   
 */
function access_affinitygroup_entity_presave(EntityInterface $entity)
{ 
  
  $type = $entity->bundle();
  if ($type == 'affinity_group') {

    if (method_exists($entity, 'getFlaggableType')) {

      // user did Join the AG (using the Join button or link)
      // The entity id of this flag is used to find the AG node
      // which we need to build the JSON to send to api. 

      $entityId = $entity->get('entity_id')->getValue()[0]['value'];
      //if ($entityId == 685) {
      //  testTheMail();
      //  return;        
      //} 

      $postJSON = makeListMembershipJSON($entityId);

      if (empty($postJSON)) {                
        showStatus("Can't add user to email list; check if user is missing Constant Contact ID.");        
      } else {
        $cca = new ConstantContactApi;
        $ccResponse = $cca->apiCall('/activities/add_list_memberships', $postJSON, 'POST');
      }    

    } else {

      // affinity group edit was saved by admin user.
      // If not already there, add list to constant contact.
      // TODO - should we skip all this if list_id already set
      // instead of checking for list of lists from CC?

      // get all existing lists

      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists ');
      if (empty($lists)) {
        return;
      }

      //debug info: here you can see all lists CC knows about along with their List IDs
      //kint($lists);
      $title = $entity->getTitle();
      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          $list_exists = true;
          break;
        }
      }
      // we didn't find an email list for this AG - make it now.
      if (!$list_exists) {
        $get_fields = $entity->getFields();
        $summary = $get_fields['body']->summary;
        // Api max is 255 characters.
        $summary = (strlen($summary) > 255) ? substr($summary, 0, 255) : $summary;
        $post_data = [
          'name' => $title,
          'favorite' => 0,
          'description' => $summary
        ];
        $post_data = json_encode($post_data);
      
        // Create Constant contact list named with AG title
        $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
        
        if (!empty($created_list)) {        
          $list_id = Xss::filter($created_list->list_id);
        }

        if (!empty($list_id)) {
            $entity->set('field_list_id', $list_id);
        } else {
            showStatus('Bad Constant Contact list id.');
        }
      }      
    }
  }
}

/**
 * Implements hook_entity_delete().
 * * Handles either
 * 1) User did Leave on Affinity Group
 *    Remove user from the email list.
 * 2) Admin deleted Affinity Group
 *    Delete the corresponding CC email list.
 * 
 * See notes above on presave for Join flag for Leave.
 */
function access_affinitygroup_entity_delete(\Drupal\Core\Entity\EntityInterface $entity)
{  
  $type = $entity->bundle();    
  if ($type == 'affinity_group') {
    
    if (method_exists($entity, 'getFlaggableType')) {     
     
      // user did Leave AG. This flag entity id is used to find the
      // AG node and the list id within the node for json to send to api. 
      
      $entityId = $entity->get('entity_id')->getValue()[0]['value'];
      //if ($entityId == 685) {
      //  testTheMail();
      //  return;        
      //}     
     
      $postJSON = makeListMembershipJSON($entityId, false);

      if (!empty($postJSON)) {      
        $cca = new ConstantContactApi;
        $ccResponse = $cca->apiCall('/activities/remove_list_memberships', $postJSON, 'POST');        
      }  

    } else {
      // AG getting deleted. 
      $title = $entity->getTitle();
      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists');
      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          // Constant Contact contains affinity group
          // title in list.
          $list_id = $list->list_id;
          break;
        }
      }

      if (isset($list_id)) {
        $post_data = [
          'list_id' => $list_id
        ];
        $post_data = json_encode($post_data);
        $cca->apiCall("/contact_lists/$list_id", $list_id, 'DELETE');
      }
    }
  }
}

/**
 * Prepares json for api call that for adds or deletes CC user from 
 * a CC list.  The json contains 2 CC ids: the user (contact) and the
 * list id. 
 * Called from code where we have the entity id of the Join/Leave flag
 * corresponding to the Affinity Group. We use this entity id to find the
 * node (AG) containing the CC list id. 
 */

function makeListMembershipJSON($flagEntityId) 
{
  $current_user = \Drupal::currentUser();
  $user_id = $current_user->id();
        
  $user_detail = User::load($user_id);
  $user_cc_id = $user_detail->get('field_constant_contact_id')->getValue()[0]['value']; 

  if (empty($user_cc_id)) {
    return NULL;
  }

  // find the AG node that stores the entity Id of the flag; that
  // is the one and only AG that corresponds to this flag. 
  $query = \Drupal::entityQuery('node');
  $node_ids = $query
              ->condition('field_affinity_group', $flagEntityId)
              ->execute();
    
  $aval =  array_values($node_ids);
  $nid = $aval[0];

  $ag = \Drupal\node\Entity\Node::load($nid);  

  // finally we can get out the CC list id stored in the AG node.
  $fieldVal = $ag->get('field_list_id')->getValue();
  if (!empty($fieldVal)) {   
    $list_cc_id = $fieldVal[0]['value'];;
  }
    
  if (empty($list_cc_id)) {
    showStatus('Missing Constant Contact List Id for this Affinity Group.');
    return NULL;
  }

  $post_data = [
    'source' => [
      'contact_ids' => [$user_cc_id]
    ],
    'list_ids' =>  [$list_cc_id]
  ];
  $post_data = json_encode($post_data);
  return $post_data;
}

/**
 * Implements hook_user_login().
 * Add user to Constant Contact if we don't have a CC ID stored yet.
 */

function  access_affinitygroup_user_login(UserInterface $account)
{
  $current_user = \Drupal::currentUser();

  $user_id = $current_user->id();
  $user_detail = User::load($user_id);

  $cca_user_id = null;
  $field_val = $user_detail->get('field_constant_contact_id')->getValue();
  if (!empty($field_val)) {
    $cca_user_id = $field_val[0]['value'];    
  }

  // if user did not already have the CC id, try to add to CC.
  if (empty($cca_user_id)) {

    $user_first_name = $user_detail->get('field_user_first_name')->getString();
    $user_last_name = $user_detail->get('field_user_last_name')->getString();
    $user_mail = $current_user->getEmail();
    
    $cca = new ConstantContactApi;
    $cca_user_id = $cca->addContact($user_first_name, $user_last_name, $user_mail, $user_id);
    
    if (empty($cca_user_id)) {
      showStatus("Could not add user to Constant Contact.");
    }else {
      $user_detail->set('field_constant_contact_id', $cca_user_id);
      $user_detail->save();
    }
  } else {
    // this else just for debugging in early stages
    //showStatus("Login and NOT attempting add of new constant contact id.");
  }

}

function showStatus($logmsg)
{  
  \Drupal::messenger()->addStatus($logmsg);
}    

//testing only
function logdru($logmsg)
{
  $msg = basename(__FILE__) . ':' .  print_r($logmsg, true);
  \Drupal::messenger()->addStatus($msg);
}    

/**
 * Implements hook_cron().
 * Refreshes the authorization. If not run, token expires and we'll get
 * 'not authorized' return code from api calls.
 */
function access_affinitygroup_cron()
{
  // Setting this to run once a day, may need adjustment
  // if cron is run more frequently.
  if ((date('G', time()) == 01) && (date('i', time()) >= 0) && (date('i', time()) <= 30)) {
    $cca = new ConstantContactApi;
    $cca->newToken();
  }
}

/** 
 * Return error msg, or NULL if not error (in 200's)
 * todo: Perhaps we only check for 401 + just show code num otherwise
*/
  
function getHttpErrMsg($httpCode) {

    if ($httpCode < 300) {
      return NULL;      
    }

    switch ($httpCode) {
      case 400:	
        $m = 'Bad request. Either the JSON was malformed or there was a data validation error.';
        break;
      case 401:
        $m = 'The Access Token used is invalid.';
        break;
      case 403:
        $m = 'Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.';
        break;
      case 409:
        $m = 'Conflict. The resource you are creating or updating conflicts with an existing resource.';
        break;
      case 415:
        $m = 'Unsupported Media Type; the payload must be in JSON format, and Content-Type must be application/json';
        break;
      case 500:	
        $m = 'There was a problem with our internal service.';
        break;
      case 503:	
        $m = 'Our internal service is temporarily unavailable.';
        break;
      default:
        $m = 'HTTP error code: '. $httpCode;
    }
    return 'Constant Contact: '.$m;
  }

  /*
  Steps to send email campaign from Constant Contact 
  Make a POST request to create an email campaign and campaign activities.
  Make a GET request to retrieve the primary_email email campaign activity.
  Make a PUT request to update the email campaign activity and add recipients.
  Make a POST request to schedule the email campaign activity.
 */

 // 2nd 2 args are arrays
function emailToAffinityGroups($emailText, $emailTitle, $ccListIds, $agNames) {
  
  // todo = mkae the html here.
//showStatus("IN EMAIL");
  $ccResponse = setupEmailCampaign($emailText, $emailTitle);
  //kint ($ccResponse);

  if (!empty($ccResponse)) {

    $campaignId = $ccResponse->campaign_id;
    $campaignActivityId = $ccResponse->campaign_activities[0]->campaign_activity_id;

    // marigold 7
    //$campaignActivityId = '4e5b5ccf-3eab-4bbe-ba7e-558e39810661';
    //$campaignId = '2cf34668-e8f7-43e9-84a6-0abcfe544166';
    
    sendEmailCampaign($campaignId, $campaignActivityId, $ccListIds);
  }


}
/*
function testTheMail() {
  logdru("TESTING THE EMAIL SEND.");  
  
  $ccResponse = createEmailCampaign();
  //kint ($ccResponse);

  if (!empty($ccResponse)) {

    $campaignId = $ccResponse->campaign_id;
    $campaignActivityId = $ccResponse->campaign_activities[0]->campaign_activity_id;

    // marigold 7
    //$campaignActivityId = '4e5b5ccf-3eab-4bbe-ba7e-558e39810661';
    //$campaignId = '2cf34668-e8f7-43e9-84a6-0abcfe544166';
    
    sendEmailCampaign($campaignId, $campaignActivityId);
  }
}
*/

// Create the Constant Contact email campaign, which is the initial setup. 
// Nothing is sent at this point. Returns the response which included the 
// campaign id and campaign activity id needed for step leading to send.
function setupEmailCampaign($emailText, $emailTitle) {

  //$emailHtml = "<html><body>[[trackingImage]] <a href=\"http://www.constantcontact.com\">Visit NJ for Pie!</a> </body></html>";
  $emailHtml = "<html><body>[[trackingImage]]".$emailText."</body></html>";

  $campaignName = uniqid('Access-news', true);
  // unique name for campaign
  $postData = [
    'name' => $campaignName,
    'email_campaign_activities' => [
      [
      'format_type' => 5,
      'from_name'=> 'Access Support',
      'from_email'=> 'ingmann33@gmail.com',
      'reply_to_email'=> 'ingmann33@gmail.com',
      'subject'=> $emailTitle,
      'preheader'=> $emailTitle,
      'html_content' => $emailHtml
      ]
    ]    
  ];

  // could include addr here but don't have to as cc uses addr on record for footer addres in email

  $postData = json_encode($postData);
  $cca = new ConstantContactApi;
  $ccResponse = $cca->apiCall('/emails', $postData, 'POST');

  return $ccResponse;
}

// Take the campaign and campaign activity ids from the campaign setup api call, 
// set up the recipient lists, and finally, schedule for immediate sendoff.

function sendEmailCampaign($campaignId, $campaignActivityId, $ccListIds) 
{
  // first, get the activity object 
  $sent = false;
  $cca = new ConstantContactApi;
  $ccActivity = $cca->apiCall("/emails/activities/$campaignActivityId");

  if (!empty($ccActivity)) {
    
    // update activity obj with the destination cc email lists in 
    // an array with list_id from each AG group to receive news

    // test: tinaDestTest CC list;
    //$agListId = '23223746-48c4-11ed-a81f-fa163e52f1a1'; 
    //$ccActivity->contact_list_ids = array($agListId);      

    $ccActivity->contact_list_ids = $ccListIds;      
    
    $ccActivity = json_encode($ccActivity);
    $ccResponse = $cca->apiCall("/emails/activities/$campaignActivityId", $ccActivity, 'PUT');

    if (!empty($ccResponse)) {
      // finally, send it, scheduled with 0 signifying: now.
 
      $schedule = array('scheduled_date'=>'0');  
      $schedule = json_encode($schedule);
      // TODO. comment in/out for now since I have limited free test email sends
      // $ccResponse = $cca->apiCall("/emails/activities/$campaignActivityId/schedules", $schedule, 'POST');
      $sent = true;
    }   
  }
  if ($sent) {
    showStatus("News item emails sent to affinity groups.");
  } else {
    showStatus("Email error while trying to send new items to affinity groups.");
  }
}

/*

/* marigold 7
  $returned_result string (422) 
  "{"campaign_activities":
    [{"campaign_activity_id":"4e5b5ccf-3eab-4bbe-ba7e-558...
  Json (8)Contents
  ⇄⧉campaign_activities => array (2)
  Table (2)Contents (2)
  campaign_activity_id	role
  0	4e5b5ccf-3eab-4bbe-ba7e-558e39810661	primary_email
  1	f934ec15-393d-4aaf-b5c5-ebbabe368914	permalink
  ⇄campaign_id => string (36) "2cf34668-e8f7-43e9-84a6-0abcfe544166"
  ⇄created_at => string (24) "2022-10-11T15:20:25.992Z"
  ⇄current_status => string (5) "Draft"
  ⇄name => string (17) "Marigold Bakery 7"
  ⇄type => string (17) "CUSTOM_CODE_EMAIL"
  ⇄type_code => integer 26
  ⇄updated_at => string (24) "2022-10-11T15:20:25.992Z"
*/

/*
activity return looks like this before filling in the list ids
{
  "campaign_activity_id": "4e5b5ccf-3eab-4bbe-ba7e-558e39810661",
  "campaign_id": "2cf34668-e8f7-43e9-84a6-0abcfe544166",
  "role": "primary_email",
  "contact_list_ids": [],
  "segment_ids": [],
  "current_status": "DRAFT",
  "format_type": 5,
  "from_email": "ingmann33@gmail.com",
  "from_name": "Manny Piemaker",
  "reply_to_email": "ingmann33@gmail.com",
  "subject": "Daily baking newsletter",
  "preheader": "CC hey tqi new email"
}
*/

